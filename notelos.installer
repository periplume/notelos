#!/usr/bin/env bash
# file: notelos.installer
# source: https://github.com/periplume/notelos.git
# author: jason@bloom.us
# desc: installer script for notelos suite

# SCRIPT AND SHELL SETTINGS
set -o errexit
set -o nounset
set -o pipefail

####################################
# PREREQUISITES
####################################
 
# required commands
hash git || { echo 'git is required'; return 1; }
hash realpath || { echo 'realpath is required'; return 1; }

####################################
# HELPER FUNCTIONS
####################################

_printUsage () {
  cat << EOF

description: installs notelos from a local git repo into the
user's HOME/bin directory; also creates the notelos repo

usage: notelos.installer [OPTIONS] <command> [OPTIONS]

options:
-h          print help
-d          do not ask user for alternate locations
-n <name>   alt install name         (default is notelos)
-p <path>   alt install base path    (default is \$HOME)

commands:
 install                install notelos
 upgrade                upgrade notelos

install options
 install -s <file>   specify specific file
 install -f          replaces existing files (without confirmation!)
 install -b          use \$_notelosHOME/.bin
                       (default is $HOME/bin, ie \$_notelosBASE/bin)

EOF
}

####################################
# CONSOLE MESSAGING FUNCTIONS
####################################

_ask() {
	printf "\033[38;5;0;48;5;11mUSER:\033[0m %s" "$1"
}
_info() {
	printf "\033[38;5;2mINFO:\033[0m %s\n" "$1"
}
_warn() {
	printf "\033[38;5;11mWARN:\033[0m %s\n" "$1"
}
_error() {
	printf "\033[38;5;9mERROR:\033[0m %s\n" "$1"
}
_debug() {
	printf "\033[38;5;6mDEBUG:\033[0m %s\n" "$1"
}

####################################
# TEXT COLOR FORMATTING
####################################

# things we will format
# path


_fmt() {
	# arg 1 = the kind of thing
	# arg 2 = the string to be formatted
	[[ $1 = "path" ]] && printf "\033[38;5;3m%s\033[0m\n" "$2"
}


####################################
# PARAMETER PROCESSING FUNCTIONS
####################################

_getOpts () {
	# check for global command flags and set things accordingly
	local OPTIND
	while getopts ":hdn:p:" flag; do
		case ${flag} in 
			h)
				_printUsage; exit 0
				;;
			n)
				_altNAME=${OPTARG}
				_warn "setting _altNAME to '${OPTARG}'"
				_justDo=true
				;;
			p)
				_altBASE=${OPTARG}
				_warn "setting _altBASE to '${OPTARG}'"
				_justDO=true
				;;
			d)
				# do not query the user for alternate locations
				_justDo=true
				;;
			?)
				echo "invalid global option: -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	# $_subCommand is used to process the subcommand options below
	export _subCommand="${@}"
}

_getSubcommand() {
	# look for the first subcommand in the _subCommand string and act accordingly
	while ((${#})); do
		case $1 in
			help)
				_printUsage; exit 0
				;;
			install)
				_getInstallOpts
				return
				;;
			upgrade)
				_warn "upgrade function not yet implemented"
				exit 1
				;;
			*)
				_error "'${1}' is not a subcommand"
				return 1
				;;
		esac
		shift
	done
}

#################################
# SUBCOMMAND OPTION PROCESSING
#################################

_getInstallOpts() {
	# use the _subCommand string (set in _getOpts)
	set -- ${_subCommand}
	# ignore the subcommand itself
	shift
	while getopts ":fbs:" flag; do
		case ${flag} in
			s)
				# don't allow flags to be arguments to flags
				[[ "${OPTARG}" == -* ]] && { _error "option '-${flag}' requires an argument that is NOT a flag ($OPTARG)"; exit 1; }
				# only do the "specific" file designated
				[[ -z "${OPTARG}" ]] && { _error "-s requires an argument (file name)"; exit 1; }
				_specificFile="${OPTARG}"
				_warn "installing specific file '${_specificFile}'"
				;;
			f)
				# force...ie replace what's there...always dangerous
				_forceInstall=true
				_warn "performing an unsafe 'force' install"
				;;
			b)
				# store the notelos suite of scripts in _notelosHOME/.bin
				_binIntegral=true
				_warn "using .bin in notelosHOME for executables"
				;;	
			\?)
				 _error "${FUNCNAME[0]}: unknown flag '-$OPTARG'"; exit 1
				;;
			:)
				_error "${FUNCNAME[0]}: arg required for '${flag}'"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
}

_setEnv() {
	# determine the calling script
	_selfNAME=$(basename "${0}")
	_selfABSOLUTE=$(readlink -f "${0}")
	_selfBASE=$(dirname "${_selfABSOLUTE}")
	# determine the intended destination
	_notelosNAME=${_altNAME:-${_selfNAME%%.*}}
	_notelosBASE=$(readlink -f "${_altBASE:-${HOME}}")
	_notelosHOME=$(realpath "${_notelosBASE}/${_notelosNAME}")
	_notelosLAB=${_selfBASE}
	# settle the scripts location and PATH
	if [ "${_binIntegral:-false}" = true ]; then
		# user specified to pack the scripts within _notelosHOME
		_notelosBIN="${_notelosHOME}/.bin"
	else
		# otherwise, the scripts will go to $HOME/bin
		_notelosBIN="${HOME}/bin"
	fi
	# determine user and email
	git config --global --get user.name 1>/dev/null && _notelosUSERNAME=$(git config --global --get user.name)
	git config --global --get user.email 1>/dev/null && _notelosUSEREMAIL=$(git config --global --get user.email)
	[ -z "${_notelosUSERNAME:-}" ] && _notelosUSERNAME=$(whoami)
	[ -z "${_notelosUSEREMAIL:-}" ] && _notelosUSEREMAIL="unknown"
	# determine the validity of the intended destination
	[ -d "${_notelosBASE}" ] || { _error "base '${_notelosBASE}' does not exist"; exit 1; }
	[ -w "${_notelosBASE}" ] || { _error "can't write in given path '${_notelosBASE}'"; exit 1; }
	# make these global
	declare -g _selfNAME
	declare -g _selfABSOLUTE
	declare -g _selfBASE
	declare -g _notelosNAME
	declare -g _notelosBASE
	declare -g _notelosHOME
	declare -g _notelosBIN
	declare -g _notelosLAB
	declare -g _notelosUSERNAME
	declare -g _notelosUSEREMAIL
	# print for debug
	#declare -p _selfNAME
	#declare -p _selfABSOLUTE
	#declare -p _selfBASE
	#declare -p _notelosNAME
	#declare -p _notelosBASE
	#declare -p _notelosHOME
	#declare -p _notelosBIN
	#declare -p _notelosLAB
	#declare -p _notelosUSERNAME
	#declare -p _notelosUSEREMAIL
}

_install() {
	local _installTO=${_notelosHOME}
	local _installFROM=${_notelosLAB}
	# warn if the dir is not new and not empty
	if [ -e "${_installTO}" ]; then
	 	_warn "path '${_installTO}' exists"
		if [ ! -z "$(ls -A "${_notelosHOME}")" ]; then
			_warn "path '${_notelosHOME}' is NOT empty"
		fi
		_ask "use '${_installTO}' anyway? [y/n] "
		{ read -rn1 _answer; echo; }
		[[ ${_answer:-} = "y" ]] && unset _answer || { _warn "user aborted"; exit 1; }
		_proceed=true
	fi
	# finalize the source and destination for the operation
	# (respect the -d global flag)
	if [ "${_justDo:-false}" = false ]; then
		# name can be modified during install
		_ask "enter name for installation [$(_fmt path "${_notelosNAME}")] "
		read _name
		[ -z "${_name}" ] || declare -g _notelosNAME=${_name}
		# base path can be modified during install
		_ask "enter base location for installation [$(_fmt path "${_notelosBASE}")] "
		read _base
		[ -z "${_base}" ] || declare -g _notelosBASE=${_base}
		[[ -e "${_notelosBASE}" ]] || { _warn "'${_notelosBASE}' not found"; exit 1; }
		declare -g _notelosHOME=${_notelosBASE}/${_notelosNAME}
		#  lab location (ie git repo) can be modified during install
		_ask "enter path for git source repo [$(_fmt path "${_notelosLAB}")] "
		read _repo
		[ -z "${_repo}" ] || declare -g _notelosLAB=${_repo}
		[[ -e "${_notelosLAB}" ]] || { _warn "'${_notelosLAB}' is not found"; exit 1; }
		# binary path can be modified during install
		_ask "enter location for script executable files [$(_fmt path "${_notelosBIN}")] "
		read _binpath
		[ -z "${_binpath}" ] || declare -g _notelosBIN=${_binpath}
		# set the user name for git
		_ask "enter preferred name (for git commits) [$(_fmt path "${_notelosUSERNAME}")] "
		read _username
		[ -z "${_username}" ] || declare -g _notelosUSERNAME=${_username}
		# set the git email
		_ask "enter email address (for git commits) [$(_fmt path "${_notelosUSEREMAIL}")] "
		read _useremail
		[ -z "${_useremail}" ] || declare -g _notelosUSEREMAIL=${_useremail}
		#TODO validate email format
		# create a user gitconfig if it does not exist
		if [ ! -e "$HOME/.gitconfig" ]; then
			git config --global user.name "${_notelosUSERNAME}"
			git config --global user.email "${_notelosUSEREMAIL}"
			git config --global includeif.gitdir:"${_notelosHOME}".path "${_notelosHOME}/.gitconfig"
		fi
		# reset locations based on input
		_installTO=${_notelosBASE}/${_notelosNAME}
		_installFROM=${_notelosLAB}
	fi
	# the source and destination are resolved
	_debug "$(declare -p _installTO)"
	_debug "$(declare -p _installFROM)"
	_debug "$(declare -p _selfNAME)"
	_debug "$(declare -p _selfABSOLUTE)"
	_debug "$(declare -p _selfBASE)"
	_debug "$(declare -p _notelosNAME)"
	_debug "$(declare -p _notelosBASE)"
	_debug "$(declare -p _notelosHOME)"
	_debug "$(declare -p _notelosLAB)"
	_debug "$(declare -p _notelosBIN)"
	_debug "$(declare -p _notelosUSERNAME)"
	_debug "$(declare -p _notelosUSEREMAIL)"
	# check if _notelosBIN is in the PATH
	_checkPath "${_notelosBIN}" || _warn "you should add '${_notelosBIN}' to your \$PATH"
	# determine the validity of the intended destination (after possible changes)
	[ -d "${_notelosBASE}" ] || { _error "base '${_notelosBASE}' does not exist"; exit 1; }
	[ -w "${_notelosBASE}" ] || { _error "can't write in given path '${_notelosBASE}'"; exit 1; }
	# now make the notelosHOME directory structure
	[[ -e "${_notelosHOME}" && $_proceed != true ]] && { _error "'${_notelosHOME}' already exists"; exit 1; }
	mkdir "${_notelosHOME}"
	mkdir "${_notelosHOME}/.config"		# vimrc etc
	mkdir "${_notelosHOME}/.code"			# make this the lab and integrate dev
	mkdir "${_notelosHOME}/.state"		# state files
	mkdir "${_notelosHOME}/.log"			# log files
	mkdir "${_notelosHOME}/.mount"		# dsink mount
	mkdir "${_notelosHOME}/.hints"		# hint files
	mkdir "${_notelosHOME}/.bin"			# alt working executables (default is still $HOME/bin)
	# now make bin if it's not there
	[ -d "${_notelosBIN}" ] || mkdir "${_notelosBIN}"
	# put the binary files in place
	if [[ ${_specificFile:-} ]] ; then
		_installFile "${_notelosLAB}/bin/${_specificFile}" "${_notelosBIN}/${_specificFile}"
	else
		for _file in $(ls "${_notelosLAB}/bin"); do
			_installFile "${_notelosLAB}/bin/${_file}" "${_notelosBIN}/${_file}"
		done
	fi
	# now do the config files
	for _configFile in $(ls "${_notelosLAB}/config"); do
		_installFile "${_notelosLAB}/config/${_configFile}" "${_notelosHOME}/.config/${_configFile}"
	done
	# now do the hints files
	for _hintFile in $(ls "${_notelosLAB}/hints"); do
		_installFile "${_notelosLAB}/hints/${_hintFile}" "${_notelosHOME}/.hints/${_hintFile}"
	done
	# create the git repo
	git init -q -b main "${_notelosHOME}"
	# update the git ignore file
	echo ".code" >> "${_notelosHOME}/.gitignore" 
	echo ".bin" >> "${_notelosHOME}/.gitignore" 
	echo ".state" >> "${_notelosHOME}/.gitignore" 
	echo ".mount" >> "${_notelosHOME}/.gitignore" 
	echo ".log" >> "${_notelosHOME}/.gitignore"
	# add gitignore and components to be tracked in git
	git -C "${_notelosHOME}" add .gitignore
	git -C "${_notelosHOME}" add .config/*
	git -C "${_notelosHOME}" add .hints/*
	# make a first commit
	git -C "${_notelosHOME}" commit -m "[genesis] ${_notelosNAME} created by ${_notelosUSERNAME}"
}

# copy wrapper with safeguards
_installFile() {
	# arg 1 = source
	# arg 2 = dest
	local _confirm
	local _sourceDir="$(dirname $1)"
	# don't bother if files are the same
	if cmp --silent "${1}" "${2}"; then
		_debug "${1} and ${2} are identical"
	else
		if [[ -z "${_forceInstall:-}" ]]; then
			# ask for confirmation
			if [[ -e "${2}" ]]; then
				# file already exists
				#_ask "replace ${2} with file from ${_sourceDir}? [y/n] "
				_ask "replace ${2}? [y/n] "
				read -rsn1 _confirm; echo
				[[ ${_confirm} = "y" ]] || { _error "file not copied"; return 1; }
				cp "${1}" "${2}"
			else
				# file does not exist
				cp "${1}" "${2}"
				_info "installed ${2}"
			fi
		else
			# force enabled
			cp "${1}" "${2}"
			_info "installed ${2}"
		fi
	fi
}

_checkPath() {
	# check if $1 is in $PATH
	# if yes, return 0
	# if missing, ask to modify (or print instructions if _justDo=true)
	local _bin=$1
	_check() {
		local _bin=${1}
		IFS=':' read -ra path_list <<< "$PATH"
		found=false
		for p in "${path_list[@]}"; do
			if [ "$p" == "${_bin}" ]; then
				found=true
				break
			fi
		done
		$found || return 1
	}
	_check $_bin || found=false
	if [ "$found" == false ]; then
		if [ "${_justDo:-false}" = false ]; then
			_ask "add $_bin to the \$PATH? [y/n] "
			{ read -rn1 _ans; echo; }
			if [[ ${_ans:-} = "y" ]]; then
				echo 'export PATH=$PATH:'"$_bin" >> ~/.bashrc
				export PATH="$PATH:$_bin"
				_info "added $_bin to the .bashrc PATH"
				_warn "restart the shell or source .bashrc for it to take effect permanently"
			else
				return 1
			fi
		else
			return 1
		fi
	fi
	_check $_bin
}
	
main() {
	# preserve the initial command
	export _fullCommand="${@}"
	# read the global options
	_getOpts "${@}"
	# read the subcommand (and its options)
	_getSubcommand ${_subCommand}
	# setup the environment after processing all command line parameters
	_setEnv
	#_debug "full command is '${_selfNAME} ${_fullCommand}'"
	#_debug "sub command is '${_subCommand}'"
	# run the desired command
	[ -z "${_subCommand:-}" ] && _printUsage
	[ -n "${_subCommand:-}" ] && eval _"${_subCommand}" || exit
}
main "${@}"
