#!/usr/bin/env bash
# file: notelos.installer
# source: https://github.com/periplume/notelos.git
# author: jason@bloom.us
# desc: installer script for notelos suite

# SCRIPT AND SHELL SETTINGS
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

_checkSudo() {
	# check for sudo privledges (not exhaustive)
	# return 0 if they seem to exist, otherwise 1
	# we use timeout to kill sudo -v...then match the return of sudo
	timeout -k .2 .2 sudo -v > /dev/null 2>&1
	_error=$?
	# return of zero indicates we have an active sudo session
	[[ ${_error} = 0 ]] && return 0
	# if this produces 1, not in sudoers file
	[[ ${_error} = 1 ]] && return 1
	# if this produces 137, in sudoers file but no active session
	[[ ${_error} = 137 ]] && return 0
	# if neither matched, assume not and return 1
	return 1
}


_checkExternals() {
	_required=(git fzf vim)
	_recommended=(whisper ffmpeg tig paps cargo code-minimap)
	_requiredFiles=(vim-plug minimap.vim)
	_recommendedFiles=(vim-plug minimap.vim)
	# TODO fix this for files eg vim-plug
	_temp=$(mktemp -d)
	for _required in "${_required[@]}"; do
		if command -v ${_required} &>/dev/null; then
			_info "${_required} found"
		else
			_warn "${_required} not found and is required"
			_ask "install ${_required} ? [y/n] "
			read -rsn1 _yn
			[[ ${_yn} != "y" ]] && { echo; _warn "${_required} will need to be installed"; break; }
			echo ; _warn "install logs in ${_temp}"
			_installExternals ${_required} ${_temp}
			[[ $? = 0 ]] && _info "${_required} installed" || _error "${_required} install failed"
		fi
	done
	for _recommended in "${_recommended[@]}"; do
		if command -v ${_recommended} &>/dev/null; then
			_info "${_recommended} found"
		else
			_warn "${_recommended} not found and is recommended"
			_ask "install ${_recommended} ? [y/n] "
			read -rsn1 _yn
			[[ ${_yn} != "y" ]] && { echo; _warn "${_recommended} will need to be installed"; break; }
			echo; _warn "install logs in ${_temp}"
			_installExternals ${_recommended} ${_temp}
			[[ $? = 0 ]] && _info "${_recommended} installed" || _error "${_recommended} install failed"
		fi
	done
}

_installExternals() {
	_what=$1
	_temp=$2
	case $1 in
		fzf)
			_info "fetching fzf from github..."
			git clone --depth 1 https://github.com/junegunn/fzf.git ~/lab/fzf &> ${_temp}/fzf_git_clone.out
			[[ $? = 0 ]] && _info "done" || { _error "failed"; return 1; }
			_info "installing fzf..."
			~/lab/fzf/install --no-completion --no-key-bindings --update-rc &> ${_temp}/fzf_install.out
			[[ $? = 0 ]] && _info "done" || { _error "failed"; return 1; }
			source ~/.bashrc
			;;
		git)
			_warn "no git installer yet; do it yourself"
			_info "use: sudo apt install git-all"
			;;
		tig)
			_warn "no tig installer yet; do it yourself"
			_info  "plain old apt-get works but requires sudo: apt-get install tig"
			;;
		paps)
			# sudo apt install paps
			_warn "no paps installer yet; do it yourself"
			_info  "use 'sudo apt install paps'"
			;;
		cargo)
			# installs all in $HOME...remove with 'rustup self uninstall'
			_info "installing rust..."
			curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -qy &> ${_temp}/rust_install.out
			[[ $? = 0 ]] && _info "done" || { _error "failed"; return 1; }
			source ~/.bashrc
			;;
		code-minimap)
			_info "installing rust..."
			if command -v cargo &>/dev/null; then
				cargo install --locked code-minimap &> ${_temp}/code-minimap_cargo_install.out
				[[ $? = 0 ]] && _info "done" || { _error "failed with cargo"; return 1; }
			else
				git clone https://github.com/wfxr/code-minimap ~/lab/code-minimap &> ${_temp}/code-minimap_git_clone.out
				[[ $? = 0 ]] && _info "done" || { _error "failed with git"; return 1; }
			fi
			;;
		vim-plug)
			curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &> ${_temp}/vim-plug_install.out
			;;
		*)
			echo "$1 fed to _installExternals in error" >> ${_temp}/error.log
			;;
	esac
}
# install cargo/rust  OPTION (to make minimap work)
# curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -qy
# install code-minimap
# git clone https://github.com/wfxr/code-minimap
#   or
# cargo install --locked code-minimap
# install vim-plug
# curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# had to run
# PlugInstall
# to install the plugins!

####################################
# PREREQUISITES
####################################
 
# required commands
hash git || { echo 'git is required'; return 1; }
hash realpath || { echo 'realpath is required'; return 1; }

####################################
# HELPER FUNCTIONS
####################################

_printUsage () {
  cat << EOF

description: installs notelos from a local git repo into the
user's HOME/bin directory; also creates the notelos repo

usage: notelos.installer [OPTIONS] <command> [OPTIONS]

options:
-h          print help
-d          do not ask user for alternate locations
-n <name>   alt install name         (default is notelos)
-p <path>   alt install base path    (default is \$HOME)
-D          enables developer mode (live repo incorporated)

commands:
 install                install notelos
 upgrade                upgrade notelos

install options
 install -b             put executables in \$HOME/bin

upgrade options
 upgrade -s <file>      specify specific file
 upgrade -f             replaces existing files (without confirmation!)
EOF
}

####################################
# CONSOLE MESSAGING FUNCTIONS
####################################

_ask() {
	printf "\033[38;5;0;48;5;11mUSER\033[0m %s" "$1"
}
_info() {
	printf "\033[38;5;2mINFO\033[0m %s\n" "$1"
}
_warn() {
	printf "\033[38;5;11mWARN\033[0m %s\n" "$1"
}
_error() {
	printf "\033[38;5;9mERROR\033[0m %s\n" "$1"
}
_debug() {
	printf "\033[38;5;6mDEBUG\033[0m %s\n" "$1"
}

####################################
# TEXT COLOR FORMATTING
####################################

_fmt() {
	# arg 1 = the kind of thing
	# arg 2 = the string to be formatted
	[[ $1 = "path" ]] && printf "\033[38;5;3m%s\033[0m\n" "$2"
}

####################################
# PARAMETER PROCESSING
####################################

_getOpts () {
	# read all the positional parameters and set things accordingly
	# first look for the global option flags and option arguments
	local OPTIND
	while getopts ":hdDn:p:" flag; do
		case ${flag} in 
			h)
				_printUsage; exit 0
				;;
			n)
				# don't allow flags to be arguments to flags
				[[ "${OPTARG}" == -* ]] && { _error "option '-${flag}' requires an argument that is NOT a flag ($OPTARG)"; exit 1; }
				_warn "setting notelos name to '${OPTARG}'"
				_altNAME=${OPTARG}
				#_justDo=true
				;;
			p)
				# don't allow flags to be arguments to flags
				[[ "${OPTARG}" == -* ]] && { _error "option '-${flag}' requires an argument that is NOT a flag ($OPTARG)"; exit 1; }
				_warn "setting notelos base dir to '${OPTARG}'"
				_altBASE=${OPTARG}
				#_justDo=true
				;;
			d)
				# do not query the user, just do it
				_justDo=true
				;;
			D)
				_warn "developer mode true"
				# developer mode (future feature)
				_developerMode=true
				;;
			?)
				echo "invalid global option: -$OPTARG"; exit 1
				;;
		esac
	done
	# shift and reset the getopts index before processing subcommand
	shift $((OPTIND - 1)); OPTIND=1
	# preserve the full subcommand with its parameters
	export _subCommandParams="${@}"
	# next look for the subcommand and check for its options
	while ((${#})); do
		case ${1} in
			help)
				_printUsage; exit 0
				;;
			install)
				_subCommand=$1; shift
				#while getopts ":b" flag; do
				#	case ${flag} in
				#		b)
				#			# store the notelos suite of scripts in $HOME/bin
				#			# TODO this should not be an option...otherwise confusing path
				#			# problem emerges
				#			_binIntegral=false
				#			_warn "using '\$HOME/bin' for executables"
				#			;;	
				#		\?)
				# 			_error "${FUNCNAME[0]}: unknown flag '-${OPTARG}'"; exit 1
				#			;;
				#		:)
				#			_error "${FUNCNAME[0]}: arg required for '-${OPTARG}'"; exit 1
				#		;;
				#	esac
				#done
				#shift $((OPTIND - 1))
				;;
			upgrade)
				_subCommand=$1; shift
				while getopts ":fs:" flag; do
					case ${flag} in
						s)
							# don't allow flags to be arguments to flags
							[[ "${OPTARG}" == -* ]] && { _error "option '-${flag}' requires an argument that is NOT a flag ($OPTARG)"; exit 1; }
							# only do the "specific" file designated
							_specificFile="${OPTARG}"
							_info "installing specific file '${_specificFile}'"
							;;
						f)
							# force...ie replace what's there...always dangerous
							_forceInstall=true
							_warn "performing an unsafe 'force' install"
							;;
						\?)
				 			_error "${FUNCNAME[0]}: unknown flag '-${OPTARG}'"; exit 1
							;;
						:)
							_error "${FUNCNAME[0]}: arg required for '-${OPTARG}'"; exit 1
							;;
					esac
				done
				shift $((OPTIND - 1))
				;;
			*)
				_error "'${1}' is not a subcommand"
				return 1
				;;
		esac
	done
}

####################################
# SET THE ENVIRONMENT
####################################

_setEnv() {
	# set up the initial environment details
	# determine the calling script
	# experimenting with a "pipe install" shows that using these methods to
	# determine what we need are all unreliable
	_selfNAME=$(basename "${BASH_SOURCE[0]}")
	_selfABSOLUTE=$(readlink -f "${BASH_SOURCE[0]}")
	_selfBASE=$(dirname "${_selfABSOLUTE}")
	# determine the intended destination
	#_notelosNAME=${_altNAME:-${_selfNAME%%.*}}  # unreliable (if piped)
	_notelosNAME=${_altNAME:-notelos}
	_notelosBASE=$(readlink -f "${_altBASE:-${HOME}}")
	_notelosHOME=$(realpath "${_notelosBASE}/${_notelosNAME}")
	_notelosLAB=${_selfBASE}
	_notelosBIN="${_notelosHOME}/.bin"
	## settle the location of executable scripts and library and PATH
	#if [ "${_binIntegral:-true}" = true ]; then
	#	# all scripts deployed into .bin directory within _notelosHOME
	#	_notelosBIN="${_notelosHOME}/.bin"
	#else
	#	# user prefers $HOME/bin
	#	_notelosBIN="${HOME}/bin"
	#fi
	# determine user's full name and email from git if possible
	git config --global --get user.name 1>/dev/null && _notelosUSERFULLNAME=$(git config --global --get user.name)
	git config --global --get user.email 1>/dev/null && _notelosUSEREMAIL=$(git config --global --get user.email)
	_notelosUSERNAME=$(whoami)
	#[ -z "${_notelosUSERNAME:-}" ] && _notelosUSERNAME=$(whoami)
	[ -z "${_notelosUSEREMAIL:-}" ] && _notelosUSEREMAIL="unknown"
	[ -z "${_notelosUSERFULLNAME:-}" ] && _notelosUSERFULLNAME=${_notelosUSERNAME}
	# make these global
	declare -g _selfNAME
	declare -g _selfABSOLUTE
	declare -g _selfBASE
	declare -g _notelosNAME
	declare -g _notelosBASE
	declare -g _notelosHOME
	declare -g _notelosBIN
	declare -g _notelosLAB
	declare -g _notelosUSERNAME
	declare -g _notelosUSEREMAIL
	declare -g _notelosUSERFULLNAME
	# print for debug
	_debug "$(declare -p _selfNAME)"
	_debug "$(declare -p _selfABSOLUTE)"
	_debug "$(declare -p _selfBASE)"
	_debug "$(declare -p _notelosNAME)"
	_debug "$(declare -p _notelosBASE)"
	_debug "$(declare -p _notelosHOME)"
	_debug "$(declare -p _notelosBIN)"
	_debug "$(declare -p _notelosLAB)"
	_debug "$(declare -p _notelosUSERNAME)"
	_debug "$(declare -p _notelosUSEREMAIL)"
	_debug "$(declare -p _notelosUSERFULLNAME)"
}

_checkInstalled() {
	# look for existing installation
	# return 1 if not installed, 0 if installed
	[[ -e "${_notelosHOME}/.git/description" ]] && return
}

_validateEmail() {
	# lifted from https://gist.github.com/guessi
	regex="^(([A-Za-z0-9]+((\.|\-|\_|\+)?[A-Za-z0-9]?)*[A-Za-z0-9]+)|[A-Za-z0-9]+)@(([A-Za-z0-9]+)+((\.|\-|\_)?([A-Za-z0-9]+)+)*)+\.([A-Za-z]{2,})+$"
	[[ $1 =~ ${regex} ]] && return
}

_isNameValid() {
  # _isNameValid: check for allowed names
  # arg = name
  # return 0 (yes) if valid, 1 (no) if invalid
  # legal name: max char = 25, min=2
  #             allowed characters: a-z A-Z 0-9 - .
  #             first and last character alphanumeric only
  #             no double dash or dot 
  #             no dash follows dot and vice versa
	local _minChar=2
	local _maxChar=25
  local _requestedName="${*}"
  local _strLength=${#_requestedName}
	local _allowed=0
  # check first char...must be lowercase or number
  if [[ ! ${_requestedName} =~ ^[[:alnum:]] ]]; then
    _warn "first char must be letter or digit"
    _allowed=1
  # check string length
  elif [ "${_strLength}" -lt ${_minChar} ] || [ "${_strLength}" -gt ${_maxChar} ]; then
    _error "length violation: name must be >${_minChar} and <${_maxChar}"
    _allowed=1
  # check last char...must be alpha or number
  elif [[ ! ${_requestedName} =~ [[:alnum:]]$ ]]; then
    _error "last char must be letter or digit"
    _allowed=1
  # check for allowed characters
  elif [[ ! ${_requestedName} =~ ^([[:alnum:]]|[-.])*$ ]]; then
    _error "only alphanumeric, hyphen and period characters allowed"
    _allowed=1
  else
    # check for other conditions we deem illegal
    case ${_requestedName} in
      *--* ) _error "double dash"; _allowed=1 ;;
      *..* ) _error "double dot"; _allowed=1 ;;
      *.-* ) _error "dash follows dot"; _allowed=1 ;;
      *-.* ) _error "dot follows dash"; _allowed=1 ;;
    esac
  fi
	return $_allowed
}

_isBaseValid() {
	_valid=0
	[ -d "${1}" ] || { _warn "base '${1}' does not exist"; _valid=1; }
	[ -w "${1}" ] || { _warn "can't write in given path '${1}'"; _valid=1; }
	return $_valid
}

_install() {
	_checkInstalled && { _warn "pre-existing installation detected, doing upgrade"; _upgrade; }
	# finalize the source and destination for the operation
	# (respect the -d global "just do it" flag)
	if [ "${_justDo:-false}" = false ]; then
		# name can be modified during install
		_ask "enter name for installation [$(_fmt path "${_notelosNAME}")] "
		read _name
		[ -z "${_name}" ] || _notelosNAME=${_name}
		_isNameValid "${_notelosNAME}" || { _error "invalid name '${_notelosNAME}'"; exit 1; }
		declare -g _notelosNAME
		# base path can be modified during install
		_ask "enter base location for installation [$(_fmt path "${_notelosBASE}")] "
		read _base
		[ -z "${_base}" ] || _notelosBASE=${_base}
		_isBaseValid "${_notelosBASE}" || { _error "'${_notelosBASE}' is not valid base path"; exit 1; }
		declare -g _notelosBASE
		declare -g _notelosHOME=${_notelosBASE}/${_notelosNAME}
		declare -g _notelosBIN=${_notelosHOME}/.bin
		#  lab location (ie git repo) can be modified during install
		_ask "enter path for git source repo [$(_fmt path "${_notelosLAB}")] "
		read _repo
		[ -z "${_repo}" ] || declare -g _notelosLAB=${_repo}
		[[ -e "${_notelosLAB}" ]] || { _error "'${_notelosLAB}' is not found"; exit 1; }
		# set the user name for git
		_ask "enter preferred user name (for git commits) [$(_fmt path "${_notelosUSERNAME}")] "
		read _username
		[ -z "${_username}" ] || _notelosUSERNAME=${_username}
		# set the git email
		_ask "enter email address (for git commits) [$(_fmt path "${_notelosUSEREMAIL}")] "
		read _useremail
		[ -z "${_useremail}" ] || _notelosUSEREMAIL=${_useremail}
		_validateEmail "${_notelosUSEREMAIL}" || { _error "invalid email '${_notelosUSEREMAIL}'"; exit 1; }
		# create a global user gitconfig if it does not exist
		if [ ! -e "$HOME/.gitconfig" ]; then
			git config --global user.name "${_notelosUSERNAME}"
			git config --global user.email "${_notelosUSEREMAIL}"
			git config --global includeif.gitdir:"${_notelosHOME}".path "${_notelosHOME}/.git/config"
		else
			_ask "update .gitconfig with '${_notelosNAME}' include directive? [y/n] "
			read _yn
			if [[ ${_yn} = "y" ]]; then
				git config --global includeif.gitdir:"${_notelosHOME}".path "${_notelosHOME}/.git/config"
			else
				_warn "it is recommended to update the global gitconfig with an includeif statement!"
			fi
		fi
	fi
	# the source and destination are resolved
	_debug "$(declare -p _selfNAME)"
	_debug "$(declare -p _selfABSOLUTE)"
	_debug "$(declare -p _selfBASE)"
	_debug "$(declare -p _notelosNAME)"
	_debug "$(declare -p _notelosBASE)"
	_debug "$(declare -p _notelosHOME)"
	_debug "$(declare -p _notelosLAB)"
	_debug "$(declare -p _notelosBIN)"
	_debug "$(declare -p _notelosUSERNAME)"
	_debug "$(declare -p _notelosUSEREMAIL)"
	_debug "$(declare -p _notelosUSERFULLNAME)"
	#
	# check if _notelosBIN is in the PATH
	_checkPath "${_notelosBIN}" || _warn "you should add '${_notelosBIN}' to your \$PATH"
	# determine the validity of the intended destination (after user input)
	[ -d "${_notelosBASE}" ] || { _error "base '${_notelosBASE}' does not exist"; exit 1; }
	[ -w "${_notelosBASE}" ] || { _error "can't write in given path '${_notelosBASE}'"; exit 1; }
	# warn if the dir is not new and not empty
	if [ -e "${_notelosHOME}" ]; then
	 	_warn "path '${_notelosHOME}' exists"
		if [ ! -z "$(ls -A "${_notelosHOME}")" ]; then
			_warn "path '${_notelosHOME}' is NOT empty"
		fi
		_ask "use '${_notelosHOME}' anyway? [y/n] "
		{ read -rn1 _answer; echo; }
		#TODO would be nice to detect CR and depending, send that echo or not
		[[ ${_answer:-} = "y" ]] && unset _answer || { _warn "user aborted"; exit 1; }
		# set this so we can carry on later when we check dirs
		_proceed=true
	fi
	# now make the notelosHOME directory structure
	[[ -e "${_notelosHOME}" && $_proceed != true ]] && { _error "'${_notelosHOME}' already exists"; exit 1; }
	[ ! -d "${_notelosHOME}" ] && mkdir "${_notelosHOME}"
	mkdir "${_notelosHOME}/.config"		# vimrc etc (git tracked)
	mkdir "${_notelosHOME}/.code"			# make this the lab and integrate dev (future)
	mkdir "${_notelosHOME}/.state"		# state (git tracked)
	mkdir "${_notelosHOME}/.log"			# log files
	mkdir "${_notelosHOME}/.dsink"		# dsink state and mount (git tracked)
	mkdir "${_notelosHOME}/.hints"		# hint files (git tracked)
	mkdir "${_notelosHOME}/.bin"			# all working executables
	# now make bin if it's not there
	[ -d "${_notelosBIN}" ] || mkdir "${_notelosBIN}" || { _error "fatal: could not make '${_notelosBIN}'"; exit 1; }
	# now put the binary files in place
	for _file in $(ls "${_notelosLAB}/bin"); do
		_installFile "${_notelosLAB}/bin/${_file}" "${_notelosBIN}/${_file}"
	done
	# now do the config files
	for _configFile in $(ls "${_notelosLAB}/config"); do
		_installFile "${_notelosLAB}/config/${_configFile}" "${_notelosHOME}/.config/${_configFile}"
	done
	# now do the hints files
	for _hintFile in $(ls "${_notelosLAB}/hints"); do
		_installFile "${_notelosLAB}/hints/${_hintFile}" "${_notelosHOME}/.hints/${_hintFile}"
	done
	# create the git repo
	git init -q -b main "${_notelosHOME}"
	# update notelos git config with user and email here
	git -C "${_notelosHOME}" config user.name "${_notelosUSERNAME}"
	git -C "${_notelosHOME}" config user.email "${_notelosUSEREMAIL}"
	# update the gitignore file
	echo ".code" >> "${_notelosHOME}/.gitignore" 
	echo ".bin" >> "${_notelosHOME}/.gitignore" 
	echo ".log" >> "${_notelosHOME}/.gitignore"
	echo ".dsink/mount" >> "${_notelosHOME}/.gitignore" 
	# add gitignore and other components to be tracked in git
	git -C "${_notelosHOME}" add "${_notelosHOME}/.gitignore"
	git -C "${_notelosHOME}" add "${_notelosHOME}/.config/*"
	git -C "${_notelosHOME}" add "${_notelosHOME}/.hints/*"
	# make a first commit
	git -C "${_notelosHOME}" commit -q -m "[genesis] ${_notelosNAME} created by ${_notelosUSERNAME}"
	# finally, put the "installed" marker in in git description file
	_gitInitial=$(git -C "${_notelosHOME}" rev-parse --short --verify main)
	_time=$(date +%s)
	printf "${_notelosNAME}:${_notelosUSERNAME}:${_time}:${_gitInitial}\n" > "${_notelosHOME}/.git/description"
	_info "success...to begin, run 'notelos' after adjusting PATH"
	#TODO check and warn about required external commands
	_warn "there are external commands the suite requires!"
}

_upgrade() {
	_checkInstalled || { _error "no pre-existing installation found"; exit 1; }
	_warn "found $(cat ${_notelosHOME}/.git/description) already"
	# put the binary files in place
	for _file in $(ls "${_notelosLAB}/bin"); do
		_installFile "${_notelosLAB}/bin/${_file}" "${_notelosBIN}/${_file}"
		_debug "installed ${_file}"
	done
	_debug "upgrade succeeded"
	exit
}

# copy wrapper with safeguards
_installFile() {
	# arg 1 = source
	# arg 2 = dest
	local _confirm
	local _sourceDir="$(dirname $1)"
	# don't bother if files are the same
	if cmp --silent "${1}" "${2}"; then
		_debug "${1} and ${2} are identical"
	else
		if [[ -z "${_forceInstall:-}" ]]; then
			# ask for confirmation
			if [[ -e "${2}" ]]; then
				# file already exists
				#_ask "replace ${2} with file from ${_sourceDir}? [y/n] "
				_ask "replace ${2}? [y/n] "
				read -rsn1 _confirm; echo
				[[ ${_confirm} = "y" ]] || { _error "file not copied"; return 1; }
				cp "${1}" "${2}"
			else
				# file does not exist
				cp "${1}" "${2}"
				_info "installed ${2}"
			fi
		else
			# force enabled
			cp "${1}" "${2}"
			_info "installed ${2}"
		fi
	fi
}

_checkPath() {
	# check if $1 is in $PATH
	# if yes, return 0
	# if missing, ask to modify (or print instructions if _justDo=true)
	local _bin=$1
	_check() {
		local _bin=${1}
		IFS=':' read -ra path_list <<< "$PATH"
		found=false
		for p in "${path_list[@]}"; do
			if [ "$p" == "${_bin}" ]; then
				found=true
				break
			fi
		done
		$found || return 1
	}
	_check $_bin || found=false
	if [ "$found" == false ]; then
		if [ "${_justDo:-false}" = false ]; then
			_ask "add $_bin to the \$PATH? [y/n] "
			{ read -rn1 _ans; echo; }
			if [[ ${_ans:-} = "y" ]]; then
				echo 'export PATH=$PATH:'"$_bin" >> ~/.bashrc
				export PATH="$PATH:$_bin"
				_info "added $_bin to the .bashrc PATH"
				_warn "restart the shell or source .bashrc for it to take effect permanently"
			else
				return 1
			fi
		else
			return 1
		fi
	fi
	_check $_bin
}
	
main() {
	# preserve the initial positional parameters
	export _fullCommand="${@}"
	# read all the positional parameters
	_getOpts "${@}"
	# setup the environment after processing all command line parameters
	_setEnv
	# check for sudo priveledges
	#_checkSudo || _warn "sudo priveledges will be required to run fully"
	_checkSudo >/dev/null 2>&1 || _warn "sudo priveledges will be required to run fully"
	# check for external requirements
	_checkExternals
	#_debug "full command is '${_selfNAME} ${_fullCommand}'"
	#_debug "subcommand is '${_subCommand:-nosubcommand}'"
	#_debug "full subcommand is '${_subCommandParams}'"
	# run the desired command (run install if none specified)
	[ -z "${_subCommand:-}" ] && _install
	[ -n "${_subCommand:-}" ] && eval _"${_subCommand}" || exit
}
main "${@}"
