#!/usr/bin/env bash
# file: dsink
# source: https://github.com/periplume/notelos.git
# author: jason@bloom.us
# desc: media management and backup

# SCRIPT AND SHELL SETTINGS (strict mode)
set -o errexit
set -o nounset
set -o pipefail
IFS=$'\n\t'

######################################
# LIBRARY SOURCES
######################################

# source the library functions
# use the library file from the same directory if possible
# otherwise use the regular search through path method
[[ -e "$(dirname $0)/notelos-lib.sh" ]] \
  && source "$(dirname $0)/notelos-lib.sh" \
  || source notelos-lib.sh
#TODO this could use some tightened logic

# REQUIRED EXTERNAL COMMANDS
_requiredCommands=(rsync cryptsetup lsblk parted wipefs inotifywait)

###########################
# LOGGING AND CONSOLE
###########################

# default initial debugging and logging settings
# note: command line parameters can modify these
# script debug toggle (set to true to enable default global debugging)
_DEBUG=false
# silent mode for scripting (supresses all output)
_SILENT=false
# logging facility
_LOG=false

# instantiate the log/mesg functions with defaults (these will be re-initialized
# after reading positional parameters)
_fLOG

###########################
# HELPER FUNCTIONS
###########################

_printUsage () {
  cat << EOF
usage: dsink [OPTIONS] command [OPTIONS]

options:
 -h      print this usage info
 -l      log commands and debug info to log file
 -d      print debug info to stderr and/or log file
 -s      suppress all stdout/stderr
 -v      print version number and exit

EOF
_printCommands
}

_printCommands() {
		cat << EOF
 backup              synchronize defined local contents to mounted usb
 restore             reverse synchronize from usb to local device
 format              format a new usb portable device
 mount               open and mount usb device
 unmount             unmount and close usb device
 status              report on replication level status
EOF
}

_printInfo () {
  cat << EOF

dsink maintains data replication of local data onto removable
usb devices which it encrypts (with luks).

EOF
}

#################################
# PARAMETER PROCESSING
#################################

_getOpts () {
	# check for global command flags and set things accordingly
	local OPTIND
	while getopts ":hsdlv" flag; do
		case ${flag} in 
			h)
				_printInfo ; _printUsage; exit 0
				;;
 	    s)
 	      _SILENT=true
				;;
			d)
				_DEBUG=true
				;;
			l)
				_LOG=true
				;;
			v)
				_info "version: beta"; exit 0
				;;
			?)
				_error "invalid global option: '-$OPTARG'"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1)); OPTIND=1
	export _subCommandParams="${@}"
	# next look for the subcommand and check for its options
	while ((${#})); do
		case $1 in
			help)
				_printInfo ; _printUsage; exit 0
				;;
			changemonitor)
				_subCommand=$1; shift
				while getopts ":p:" flag; do
					case ${flag} in
						p)
							_changemonitorPath="${OPTARG}"
							;;
					esac
				done
				shift $((OPTIND - 1))
				return
				;;
			dsinkmonitor)
				_subCommand=$1; shift
				while getopts ":p:" flag; do
					case ${flag} in
						p)
							_dsinkmonitorPath="${OPTARG}"
							;;
					esac
				done
				shift $((OPTIND - 1))
				return
				;;
			backup)
				_subCommand=$1; shift
				while getopts ":r" flag; do
					case ${flag} in
						r)
							# future option to use when we want to do an rsync force refresh, eg
							_refresh=true
							_info "${FUNCNAME[0]}: refresh mode enabled"
							;;
						?)
							_error "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
							;;
					esac
				done
				shift $((OPTIND - 1))
				return
				;;
			restore)
				_debug "${FUNCNAME[0]}: '$1' called, check for restore flags"
				_subCommand=$1
				return
				;;
			format)
				_subCommand=$1; shift
				while getopts ":fd:" flag; do
					case ${flag} in
						f)
							_forceFormat=true
							_info "${FUNCNAME[0]}: force mode enabled"
							;;
						?)
							_error "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
						;;
					esac
				done
				shift $((OPTIND - 1))
				return
				;;
			mount)
				_subCommand=$1
				return
				;;
			unmount)
				_subCommand=$1
				return
				;;
			status)
				_subCommand=$1; shift
				while getopts ":m" flag; do
					case ${flag} in
						m)
							_printName=true
							;;
						?)
							_error "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
							;;
						esac
					done
				shift $((OPTIND - 1))
				return
				;;
			*)
				_error "$BASH_SOURCE ${FUNCNAME[0]}: '$1' is not a subcommand"
				exit 1
				;;
		esac
		shift
	done
}

##################################
# SET THE ENVIRONMENT
##################################

_setEnv() {
  # get the name and absolute path of the calling script
  _selfNAME=$(basename "${BASH_SOURCE[0]}")
  _selfABSOLUTE=$(readlink -f "${BASH_SOURCE[0]}")
  _selfBASE=$(dirname "${_selfABSOLUTE}")
  _selfCALL=${0}
  _selfPWD=$(pwd)
	# determine mode (notelos-integrated or standalone)
	[[ -n "${_notelosHOME+x}" && ${_MODE:-} != "standalone" ]] && _MODE=integrated || _MODE=standalone
	# note: the -x switch overrides the global _notelosHOME var 
	# set up the working environment
	if [[ ${_MODE} = "integrated" ]]; then
		# set up integrated mode (hidden within)
		_MASTER="${_notelosNAME}"
		_BASE="${_notelosHOME}"
		_NAME="${_NAME:-${_selfNAME}}"
		_HOME="${_BASE}/.${_NAME}"
		_GITDIR="${_HOME}/.git"
		_LOGFILE="${_BASE}/.log/${_NAME}.log"
		# inherit these (from notelos)
		_DEBUG=${_notelosDEBUG}
		_LOG=${_notelosLOG}
		_SILENT=${_notelosSILENT}
		_USERNAME=${_notelosUSERNAME}
		_USERFULLNAME=${_notelosUSERFULLNAME}
		_USEREMAIL=${_notelosUSEREMAIL}
		_EDITOR=_notelosEdit
	else
		# set up standalone mode (not hidden)
		_MASTER=self
		_BASE="${_BASE:-$HOME}"
		_NAME="${_NAME:-${_selfNAME}}"
		_HOME=${_BASE}/${_NAME}
		_GITDIR="${_HOME}/.git"
		_LOGFILE="${_BASE}/${_NAME}.log"
		# inherit these
		_DEBUG=${_DEBUG:-false}
		_LOG=${_LOG:-false}
		_SILENT=${_SILENT:-false}
		_USERNAME=$(whoami)
		_USERFULLNAME="unknown"
		_USEREMAIL="unknown"
		_EDITOR=${EDITOR:-nano}
	fi
  [[ -f "${_LOGFILE:-}" ]] && _LOGGING=true || _LOGGING=false
	_debug "$(declare -p _MODE)"
	_debug "$(declare -p _MASTER)"
	_debug "$(declare -p _NAME)"
	_debug "$(declare -p _BASE)"
	_debug "$(declare -p _HOME)"
	_debug "$(declare -p _USERNAME)"
	_debug "$(declare -p _USERFULLNAME)"
	_debug "$(declare -p _USEREMAIL)"
	_debug "$(declare -p _GITDIR)"
	_debug "$(declare -p _LOGFILE)"
	_debug "$(declare -p _DEBUG)"
	_debug "$(declare -p _SILENT)"
	_debug "$(declare -p _LOG)"
	_debug "$(declare -p _LOGGING)"
	_debug "$(declare -p _fullCommand)"
	export _MODE
	export _MASTER
	export _NAME
	export _BASE
	export _HOME
	export _USERNAME
	export _USERFULLNAME
	export _USEREMAIL
	export _GITDIR
	export _LOGFILE
	export _DEBUG
	export _SILENT
	export _LOG
	export _LOGGING
	# adding dsink specific VARS now
	_CONFIG="${_HOME}/dsink.conf"
	_CATALOG="${_HOME}/catalog"
	_MEDIA="${_CATALOG}/media"
	_MOUNT="${_HOME}/mount"
	export _MOUNT
}

_checkHome () {
	if [ -d "${_HOME}" ]; then
		#_info "'${_HOME}' found"
		[ -d "${_MOUNT}" ] || mkdir "${_MOUNT}"
		[ -d "${_CATALOG}" ] || mkdir "${_CATALOG}"
		[ -d "${_MEDIA}" ] || mkdir "${_MEDIA}"
	else
		_error "'${_HOME}' not found"
		exit 1
	fi
}

_checkExternalTools() {
	# check for required tools, report accordingly
	local _sufficient=true
	for _required in "${_requiredCommands}"; do
		if ! hash "${_required}" 2>/dev/null; then
			_error "${FUNCNAME[0]}: ${_required} not found"
			_sufficient=false
		fi
	done
	[ ${_sufficient} = true ] && return 0 || return 1
}

_backup() {
	# backup everything with rsync
	# first check that we have a mounted dsink device
	_checkMount || { _warn "dsink usb device not mounted"; return 1; }
	_rsyncDest="${_MOUNT}"/rsync/
	#rsync --exclude .dsink/mount/ -a "${_notelosHOME}" "${_rsyncDest}" &
	rsync --exclude .dsink/mount/ -a "${_notelosHOME}" "${_rsyncDest}" --log-file=/tmp/rsync.log &
	_info "backup from ${_notelosHOME} to ${_rsyncDest} initiated"
	# TODO refashion rsync as a coproc per mnemon mgt of whisper and ffmpeg
	# this way we can update the state of the rsync job...and even pause or
	# terminate it...but also not hang on umount while rsync runs!
	return
	mkdir -p "${_notelosHOME}/.dsink/backup/"
	coproc RSYNC { rsync \
		--eta --stats --progress --human-readable \
		--exclude .dsink/mount/ \
		--exclude .dsink/backup/ \
		--archive "${_notelosHOME}" "${_rsyncDest}" \
		--log-file=.dsink/backup/rsync.log &
		# once the backup is complete, do cleanup
		# record the backup
	}
}
# for the backup function...when it runs, it should do this:
# reset the counter to zero if there is a value
#for file in "${counter}"/*; do
#	[ -f "${file}" ] && rm "${file}"
#done


# backup monitor design
# start...
# 1. check for mounted dsink device
# 1a update state

_dsinkmonitor() {
	# monitor the dsink mount point and disks it depends on
	local mountpoint=$1			# use arg 1 for mountpoint
	local mounted						# true/false registered as touch file in stateDIR
	local stateDIR="${_notelosHOME}/.dsink/state/mounted/"
	local foundstate				# what monitor found in state
	local checkfrequency=5	# how often to test the mount
	# findmnt --poll=mount,umount $mountpoint
	# read each line to monitor mount and umount events
	# register into .dsink/state/mounted: true|false
	# make sure the mount state dir exists
	[ ! -d "${stateDIR}" ] && mkdir -p "${stateDIR}"
	# read what state says is the case
	if [ -f "${stateDIR}"/* ]; then
		# state is set already
		foundstate=$(basename "${stateDIR}"/*)
	else
		# no state registered
		foundstate=unknown
	fi
	# define the monitor loop function
	mountmonitor() {
		while true; do
			if findmnt "${mountpoint}" >/dev/null; then
				# mount is true
				touch "${stateDIR}true"
			else
				touch "${stateDIR}false"
			fi
			sleep ${checkfrequency}
		done
	}
	# start the monitor
	mountmonitor
}
# TODO note that findmnt isn't totally reliable
# eg i can pull the usb key and findmnt still reports true
# need a better means of detecting the loss of the mount
# monitor udevadm?
# interestingly, i can pull a mounted luks usb device, then replace it, 
# and nothing happens...robust in one sense, problematic in the sense that a
# process that relies on the mount would have no way of knowing the device was
# missing
# for example, i can pull the usb of a mounted dsink, then run:
# findmnt -x --verbose -D /home/jason/notelos/.dsink/mount
# which returns no errors
# i see that when the usb is pulled, then replaced, the mount goes read-only
# i also see that if the drive is pulled, i can touch a file on the "mounted"
# filesystem without error (the buffers seem to not care that the drive is gone)
# a second touch fails, and then the drive is marked as read-only
# without any io, the findmnt, mount, and monitoring /proc is ineffective
# use sync -f
# 1. check mount
# 2. touch "heartbeat" file and sync
# 3. if error, look for physical device
# 4. if present, remount
# 5. if absent, mark PHYS status

# 2. use inotifywait to monitor for changes in notelosHOME

_changemonitor() {
	# monitor directory recursively for changes
	# increment counter when changes are reported
	# note that this is NOT an accurate measure of the actual number of changes,
	# but a rough measure instead...to be used as a gauge
	# to observe the changes live, run:
	# inotifywait -m -r --exclude '.dsink/state' --event modify,move,create,delete
	#
	# used by notelos when a session opens
	#
	#trap '_info "changemonitor $BASHPID was terminated"' SIGTERM
	# WHY would this trap command prevent the normal termination of the child
	# process? because it does
	
	local currentvalue	# counter used to track (approx) how many changes
	local cooloff=1			# how long to sleep after each increment (change granularity)
	# the path is specified as a parameter with the -p flag and set in _getOpts
	local source="${_changemonitorPath}"
	# counter located within tracked dir (excluded from inotifywait)
	local counter="${source}/.dsink/state/counter"
	# make sure the counter dir exists
	[ ! -d "${counter}" ] && mkdir -p "${counter}"
	# define the inotifywait loop function
	monitor() {
		#TODO there is a problem here, as a left mount from mnemon
		# borks the function...the first inotifywait fails, then
		# the function falls into a loop
		# so, run inotifywait once and test if it returns 0
		#inotifywait -qq --recursive --exclude '.dsink/state' "${source}" 2>/dev/null
		if $(inotifywait -qq --recursive --exclude '.dsink/state' "${source}" 2>/dev/null); then
			#_debug "${FUNCNAME[0]}: inotifywait returned 0"
			:
		else
			_debug "${FUNCNAME[0]}: inotifywait encountered an error [$?]"
			_warn "changemonitor encountered an error and is not running"
			_warn "use 'fusermount -u /home/jason/notelos/mnemon/state/iphone/mount'"
			_warn "  to unmount stale mount"
			return 1
		fi
		# looks clean...now enter the loop
		while inotifywait -qq --recursive --exclude '.dsink/state' --event modify,move,create,delete "${source}"; do
			# first, get current counter value
			for x in "${counter}"/*; do
				if [ -f "${x}" ]; then
					# there is a counter value, read it
					currentvalue=$(basename "${x}")
					# then remove it
					rm "${x}"
				else
					# there is no value set
					currentvalue=0
				fi
			done
			# next increment counter value by 1
			(( currentvalue += 1 ))
			# TODO define a MAX value before some other action is taken
			# finally, update the counter
			touch "${counter}/${currentvalue}"
			# sleep the designated cooling off period
			sleep "${cooloff}"
		done
		# make the function recursive
		monitor "${source}"
	}
	# begin the inotifywait loop
	monitor
	# debugging problems with this
	_warn "changemonitor child process $BASHPID exited unexpectedly"
}

# dsink backup design
# state dir .dsink/state
# successful backup
#   catalog/media/$MEDIAID/full/$UNIXTIME
# to calculate the age...subtract full/time from now
#
# notelos state (in status line)
# copies (not including source)
# 1 : ridealong usb (is dsink mounted?)
# 2 : keychain usb (check last other mounted dsink)
# 3 : tertiary usb (check last 2nd other mounted dsink)
# 4 : local archive 
# 5 : iphone archive
# colorscheme
# current: green (tracking changes live with background rsync)
# session: yellow (changes since new session...ie usb swap required)
# stale: red (changes beyond current session)
# copied to iphone: blue
# detected on icloud: magenta

_format() {
	# catch premature exits
	trap _irishExit SIGINT
	_checkMount && { _error "device already mounted"; return 1; }
	_checkCrypt && { _error "crypt device active"; return 1; }
	_findNewDisk || { _error "no new disk found"; return; }
  _info "found ${_newDiskDevice}"
	_printDiskInfo "${_newDiskDevice}"
	_ask "is ${green}${_newDiskDevice}${reset} the desired disk? [type YES to proceed] "
	# better to run a timer...
	read -r -s -t 15 -n 3 _YES ; echo
	if [[ "${_YES}" != "YES" ]]; then
		_error "uppercase YES is required, try again"
		return
	fi
	local _newDsinkDisk="${_newDiskDevice}"
	local _newDsinkDiskPartition="${_newDsinkDisk}1"
	_doWritePartition "${_newDsinkDisk}" || { _error "failed to write partition on ${1}"; return; }
	_ptuuid=$(_getPTUUID ${_newDsinkDisk}) || { _error "could not get disk id"; return; }
	if [ -d "${_CATALOG}"/media/"${_ptuuid:0:3}" ]; then
		# disk id already exists
		_error "disk id ${_ptuuid:0:3} collided"
		while [ -d "${_CATALOG}"/media/"${_ptuuid:0:3}" ]; do
			_doWritePartition "${_newDsinkDisk}" _error "failed to rewrite partition with unique id on ${1}"
		done
	fi
	_debug "$BASH_SOURCE ${FUNCNAME[0]}: ptuuid=${_ptuuid}"
	_debug "$BASH_SOURCE ${FUNCNAME[0]}: disk id is ${_ptuuid:0:3}"
	mkdir "${_CATALOG}"/media/"${_ptuuid:0:3}"
	touch "${_CATALOG}"/media/"${_ptuuid:0:3}"/"${_ptuuid:3}"
	_isDeviceReady "${_newDsinkDisk}" || _error "${_newDsinkDevice} not ready"
	_isDeviceReady "${_newDsinkDisk}"1 || _error "${_newDsinkDisk}1 not ready"
	_info "encrypting ${_newDsinkDisk}1 now..."
	_doEncrypt "${_newDsinkDisk}"1 && touch "${_CATALOG}"/media/"${_ptuuid:0:3}"/encrypted \
		|| { _error "_doEncrypt ${_newDsinkDisk} failed"; return 1; }
	_info "writing filesystem now..."
	_doMakeFS && touch "${_CATALOG}"/media/"${_ptuuid:0:3}"/ready
	_mount && touch "${_CATALOG}"/media/"${_ptuuid:0:3}"/mounted
	_info "dsink device is ready and mounted"
	_info "label new dsink device as ${label}${_ptuuid:0:3}${reset} now"
}

# TODO format
# update catalog/media with
# size, name, uuid, etc
# format time
# use uudevadm to ignore these devices (to prevent the popup when inserted)

# disk media catalog
# 1. DIR disk id: $_ptuuid:0:3
# 2. TOUCH remaining ptuuid
# 3. file size to contain disk size
# other attributes
# nickname
# status (in-use, lost, corrupted, destroyed)

_doMakeFS() {
	# no args...always write to the mapper device
	until ls /dev/mapper/dsink &>/dev/null; do
		echo -n "waiting on /dev/mapper/dsink"
		sleep 0.1
	done
	sudo mkfs.ext4 -q /dev/mapper/dsink -L dsink
}

_doEncrypt() {
	# arg 1 = partition (eg /dev/sda1)
	# encrypt the device with luks, then open the device
	sudo cryptsetup luksFormat --verify-passphrase --batch-mode ${1} || \
		{ _error "cryptsetup (_doEncrypt) failed."; return 1; }
	_info "${1} encrypted, opening the device..."
	sudo cryptsetup luksOpen ${1} dsink
}

_doWritePartition() {
	# arg 1 = /dev/sda
	# 
	_isBlockDevice ${1} || _error "${1} is not a block device"
	_isDeviceWritable ${1} || _error "${1} is not ready"
	sudo wipefs --all ${1} &>/dev/null || _error "failed to wipefs ${1}"
	sudo parted -s ${1} mklabel gpt
	sudo parted -s ${1} mkpart dsink 1 100%
	_getPTUUID ${1} &>/dev/null || return 1
}

_status() {
	if [[ ${_printName:-} = "true" ]]; then
	 	if _checkMount; then
		 	_getMountedName
			return 0
		else
			return 1
		fi
	fi
	_debug "START HERE"
	if _checkCrypt; then
		_isCryptActive=true
		_debug "${FUNCNAME[0]}: crypt active"
	else
		_isCryptActive=false
		_debug "${FUNCNAME[0]}: no active crypt device"
	fi
	if [[ ${_isCryptActive} = "true" ]]; then
		# there SHOULD be a mount
		if _checkMount; then
			_debug "${FUNCNAME[0]}: _checkmount returns true"
			_getMountedName || { _warn "nothing mounted"; return 1; }
			_isMounted=true
			_info "mounted is true yes!"
		else
			_debug "${FUNCNAME[0]}: _checkmount returns false"
			_warn "nothing mounted but it should be"
			_isMounted=false
		fi
	else
		# there better NOT be a mount
		if _checkMount; then
			_debug "${FUNCNAME[0]}: _checkmount returns true  very bad!"
			_getMountedName || { _warn "nothing mounted"; return 1; }
			_isMounted=true
		else
			_debug "${FUNCNAME[0]}: _checkmount returns false"
			_info "nothing mounted, as expected"
			_isMounted=false
		fi
	fi

	# next check for dsink crypt device
	# sudo cryptsetup status dssink
  # /dev/mapper/dssink is inactive.
  #	sudo cryptsetup status dsink
  #/dev/mapper/dsink is active.
   # type:    n/a
    #cipher:  aes-xts-plain64
   # keysize: 512 bits
  #  key location: keyring
  #  device:  (null)
  #  sector size:  512
   # offset:  32768 sectors
   # size:    15626240 sectors
   # mode:    read/write


	return
	_checkMount && _getMountedName || { _info "nothing mounted"; return; }
}

_isBlockDevice() {
	# arg1 = disk device to check (eg /dev/sda)
	# return 0 if true, 1 if false
	until [ -b ${1:-null} ]; do
		sleep 0.1
		echo "waiting on block device ${1}"
	done
}
#TODO these two functions need timers!
_isDeviceReady() {
	# a little hacky way of waiting on the disk before probing
	# arg1 = disk device to check (eg /dev/sda)
	# checks for group=disk (which seems to be necessary)
	# NOTE: this function will hang indefinitely if the device never appears
	# it also relies on the /sys filesystem
	_isBlockDevice $1 || return 1
	until [ $(stat -c "%G" ${1}) = "disk" ]; do
		sleep 0.1
	done
	_isDeviceWritable $1 || { _error "device $1 not writable"; return 1; }
	return 0
}

_isDeviceWritable() {
	if stat -c "%a" $1 | grep ".[67.]" &>/dev/null; then
		return 0
	else
		return 1
	fi
}

_getPTUUID() {
	# ARG1 = sd device (eg /dev/sda)
	# the PTUUID is cataloged into dsink.disks at the time of format
	# return 1 if no device or not block
	# return 2 if no PTUUID found
	# echo the whole disk partition table UUID if found
	#local _rawDevice=${1}
	#_isBlockDevice $_rawDevice || return 1
	local _PTUUID=$(lsblk -Sn -oPTUUID ${1} 2>/dev/null)
	if [ -z "$_PTUUID" ]; then
		return 1
	else
		echo "$_PTUUID"
	fi
}

_isDiskDsink() {
	# arg 1 = disk device (/dev/sda)
	# if PTTYPE = gpt
	# if partition 1 PARTLABEL = dsink
	# return 0 if true, 1 if disk is not a dsink device (must have 1 part labeled
	# dsink)
	if [[ $(lsblk -nS -oPTTYPE ${1}) == "gpt" ]]; then
		if _getPartitionList ${1} &>/dev/null; then
			if [[ $(lsblk -n -oPARTLABEL ${1}1) == "dsink" ]]; then
				return 0
			fi
		fi
	fi
	return 1
}

_findMounts() {
	# arg 1 is the device (eg /dev/sdc)
	# get the list of partitions on the device
	_devicePartitionList=$(_getPartitionList ${1}) || return 1
	for device in "${_devicePartitionList[@]}"; do
		df -P | awk -v device="${device}" '$1 == device {print $6}'
	done
}

_waitForMounts() {
	# arg 1 = disk name (eg sda)
	# find the partitions of a disk
	_devicePartitionList=$(ls /sys/block/${1}/*/partition | cut -f5 -d/ | tr '\n' ' ')
	_t=5000
	for part in ${_devicePartitionList}; do
		findmnt --poll=mount --first-only --timeout=$_t /dev/$part &>/dev/null &
	done
	wait
}

_printMountInfo() {
	# job: discover and print filesystem details of specified whole disk
	# filesystem, mount state, and if empty
	# arg 1 = whole disk device file (eg /dev/sda)
	_partList=$(_getPartitionList "${1}") || _error "no partitions"
	_info "partitions on ${_dev}: ${_partList}"
}

_getPartitionList() {
	# for a given disk, discover how many partitions
	# return the list (eg 'sda1 sda2')
	# return 1 if none or error
	# arg 1 = whole disk device file
	_x=$(lsblk -n -l "${1}" | tail -n +2 | cut -f1 -d' ' | tr '\n' ' ')
	if [ -z "${_x}" ]; then
		return 1
	else
		echo "${_x}"
	fi
}

_printDiskInfo() {
	# arg1 = whole disk device file (ie /dev/sda)
	# get device info and print it in human readable form
	_dev=${1##*/}
	_isDeviceReady $1 || _error "$1 is not ready"
	_isDeviceWritable $1 || _error "$1 is not writable"
	udevadm settle
	echo -e "\n==============PHYSICAL:========================================"
	lsblk -S -oNAME,SIZE,VENDOR,PTTYPE,PTUUID ${1}
	echo -e "\n==============LOGICAL:========================================="
	if _getPartitionList ${1} &>/dev/null; then
		lsblk -oNAME,SIZE,PARTLABEL,FSTYPE,UUID ${1}
	else
		echo -e "\n NO PARTITIONS ON DISK"
		# TODO this is broken...when a key has a partition table but no partitions
		# it croaks
	fi
	echo -e "\n==============STATE:==========================================="
	# check for dsink signature
	if _isDiskDsink "${1}"; then
		_checkMount && _error "dsink mounted...${1}...i think"
		if _PTUUID=$(_getPTUUID ${1}); then
			_warn "${1} is a dsink disk: ${_PTUUID}"
			if [ -d "${_CATALOG}"/media/"${_PTUUID:0:3}" ]; then
				_error "disk id ${label}${_PTUUID:0:3}${reset} already exists in the media catalog!!"
			fi
			return 0
		else
			_warn "${1} looks like a dsink disk, but has no PTUUID"
			echo "require some override here"
			return 1
		fi
	else
		# disk is not a dsink device
		if ! _getPartitionList ${1} &>/dev/null; then
			_warn "disk is without partitions"
			return 0
		fi
	fi
	# print mounted devices (just in case)
	_findMounts "${1}"
}
	
_irishExit() {
	echo -ne "\r${yellow}WARNING${reset}: to retry, press R, to quit, press ENTER\n"
	read -s -t 15 -n 1 _ANS
	if [[ ${_ANS:-n} = 'R' ]]; then
		return
	else
		_warn "user requested exit with ctrl-c"
		exit 0
	fi
}

_findNewDisk() {
	# job: look at devices before, prompt user to insert new disk, identify the
	# newly inserted disk, then set the name of the device (eg /dev/sda) as a
	# global VAR=/dev/sda
	# return 1 if no new disks found
	# no args taken
	# naturally interactive...requires user engagement
	# NOTE: _SILENT=true must be ignored for this function...need to resolve this,
	# although it still works in silent mode since no user key input is required
	# NOTE: because this is interactive, we cannot pass the value back with echo
	# AND interact with the user since it would require a subshell...which waits
	# on the command (function) to complete before the output is set...ie, we need
	# to use a global VAR to pass the one result (the device file name) back.
	# the method is not ironclad...but it works by watching the /sys/block
	# namespace for changes.
	local _usbDisksBefore=($(ls /sys/block))
	local _countBefore=${#_usbDisksBefore[@]}
	local _usbDisksAfter
	local _countAfter
	local _newInsertedUsbDisk
	local _detectedNewDisk
	declare -g _newDiskDevice
	local _attempts=3
	local _namedPipe=/tmp/udev.pipe
	_info "insert usb drive now...hit ${label}CTRL-C${reset} to abort"
	_debug "initial number of devices: ${_countBefore}"
	_info "waiting for new device..."
	# using udevadm, wait until we see a match (meaning a new device is detected),
	# assign that to a var, and stop the whole pipeline of monitor data
	# we use coproc here to easily stop the 'udevadm monitor' process
	coproc UDEV { udevadm monitor --subsystem-match=block --property --kernel; }
	_debug "coproc for udev is $UDEV_PID"
	_killUDEV() { _debug "killing udev ($UDEV_PID)"; kill $UDEV_PID; }
	trap _killUDEV SIGINT
	while read -r line; do
		if [[ "$line" == DEVNAME=* ]]; then
			_debug "found ${green}line${reset}: $line"
     	_detectedNewDisk=${line#*=}
     	break
		fi
	done <&${UDEV[0]}
	# kill the udev if it's still running
	[ -z "${UDEV_PID:-}" ] || kill $UDEV_PID
	trap - SIGINT
	_usbDisksAfter=($(ls /sys/block))
	_countAfter=${#_usbDisksAfter[@]}
	if [[ ${_countAfter} -gt ${_countBefore} ]]; then
		_info "found a new device '${_detectedNewDisk}'"
	elif [[ ${_countAfter} -lt ${_countBefore} ]]; then
		_error "device disappeared...try again"
		return 1
	fi
	# if nothing changed, no new devices were detected
	[[ ${_countBefore} == ${_countAfter} ]] && { _warn "found nothing"; return 1; }
	#_debug "$BASH_SOURCE ${FUNCNAME[0]}: block devices before: [${#_usbDisksBefore[@]}] '${_usbDisksBefore[@]}'" 
	#_debug "$BASH_SOURCE ${FUNCNAME[0]}: block devices after: [${#_usbDisksAfter[@]}] '${_usbDisksAfter[@]}'" 
	# determine the new device by comparing before and after lists
	for i in "${_usbDisksAfter[@]}"; do
		skip=
		for x in "${_usbDisksBefore[@]}"; do
			[[ $i == $x ]] && { skip=1; break; }
		done
			[[ -n $skip ]] || _newInsertedUsbDisk=$i
	done
	if [[ "${_newInsertedUsbDisk}" == ${_detectedNewDisk##*/} ]]; then
		_info "confirmed new device is '${_detectedNewDisk}'"
		_newDiskDevice=${_detectedNewDisk}
	else
		_warn "not consistent"
		return 1
	fi
}

_unmount() {
	# unmount fs, close luks device, notify device can be removed
	# must be interactive to allow sudo command
	# check for mount first
	_checkMount || { _error "no dsink device mounted"; return; }
	_media=$(_getMountedName) && _info "found mounted device ${_media}" || \
		{ _warn "no mounted device found"; return 1; }
	sudo umount "${_MOUNT}" && rm "${_CATALOG}/media/${_media}/mounted" || { _error "unmount failure"; return; }
	sudo cryptsetup luksClose dsink || _error "${FUNCNAME[0]}: luksClose failed with err $?"
	_info "OK to remove usb device now"
}	

_mount() {
	# prompt use to insert dsink usb, open luks dsink, mount fs
	# check for mount first
	_debug "ATTEMPTING TO MOUNT"
	_detectedDsinkDevice=
	_checkMount && { _error "dsink device already mounted"; return 1; }
	if [ -e /dev/disk/by-partlabel/dsink ]; then
		_info "dsink partition detected"
		_detectedDsinkDevice=$(readlink -f /dev/disk/by-partlabel/dsink)
		_return=$?
		_debug "got $_return with '${_detectedDsinkDevice}'"
	else
		_warn "no dsink partition available"
		return
	fi
	if [ -n "${_detectedDsinkDevice}" ]; then
		_debug "${FUNCNAME[0]}: found the device"
		if [ ! -e /dev/mapper/dsink ]; then
			_debug "${FUNCNAME[0]}: opening '${_detectedDsinkDevice}'"
			sudo cryptsetup luksOpen ${_detectedDsinkDevice} dsink || \
				{ _warn "${FUNCNAME[0]}: could not open the device"; return 1; }
		fi
		sudo mount /dev/mapper/dsink "${_MOUNT}" || { _error "${FUNCNAME[0]}: could not mount"; return 1; }
		sudo chown -R jason:jason "${_MOUNT}"
		_deviceID=${_detectedDsinkDevice::-1}
		_media=$(_getPTUUID ${_deviceID})
		[[ -d "${_CATALOG}/media/${_media:0:3}" ]] || mkdir -p "${_CATALOG}/media/${_media:0:3}"
		touch "${_CATALOG}/media/${_media:0:3}/mounted"
	else
		_info "insert a dsink device and try again"
	fi
}
# TODO experiment with sync mount...will it kill performance or improve data
# reliability...the usb can be removed too easily...

_checkMapperFile() {
	if [ -e /dev/mapper/dsink ]; then
		return 0
	else
		return 1
	fi
}

_findUnmountedDsink() {
	# search for an unmounted dsink device
	echo DO
	# lsblk --fs
	# the above lists out devices
	# lsblk -e7
	# excludes loopback devices

}

_checkCrypt() {
	# check for active (unlocked) crypt dsink device
	# return 0 if true (active)
	local _deviceName="dsink"
	local _lsblkInfo
	#if dmsetup status "${_deviceName}" &>/dev/null; then
	_lsblkInfo=$(lsblk -n /dev/mapper/${_deviceName} 2>/dev/null)
	if [[ $? = 0 ]]; then
		#_debug "${FUNCNAME[0]}: active crypt device '${_deviceName}'"
		return 0
	else
		#_debug "${FUNCNAME[0]}: no active crypt device named '${_deviceName}'"
		return 1
	fi
}

_checkMount() {
	# check for mounted dsink device
	# return 0 for true, 1 for false
	local _isCryptActive=true
	#_debug "${FUNCNAME[0]}: checking for active crypt device"
	_checkCrypt || { _isCryptActive=false; _warn "no active crypt device"; }
	#_debug "${FUNCNAME[0]}: checking for existing mounts"
	if [[ ${_isCryptActive} = "true" ]]; then
		#TODO where does _MOUNT come from?
		if grep -qs "${_MOUNT}" /proc/mounts; then
			#_debug "${FUNCNAME[0]}: found device '${_MOUNT}' in /proc/mounts"
			return 0
		else
			_warn "${FUNCNAME[0]}: crypt active but no mount!!!"
			_debug "${FUNCNAME[0]}: no device '${_MOUNT}' in /proc/mounts"
			return 1
		fi
	else
		# there is no active crypt device...so should never have a mount
		# but we shuld check, in case
		if grep -qs "${_MOUNT}" /proc/mounts; then
			_warn "${FUNCNAME[0]}: no active crypt device, but mount exists!!"
			return 1
		else
			_warn "${FUNCNAME[0]}: no active crypt device, and no mount"
			return 1
		fi
	fi
}

_getMountedName() {
	_mounted=$(find ${_MEDIA}/*/mounted -type f)
	_a=${_mounted%*/mounted}
	_media=${_a##*/}
	echo ${_media}
}

main() {
	# preserve the initial positional parameters
	export _fullCommand="${@}"
	# read all the positional parameters
 	_getOpts "${@}"
  # setup the environment after processing all command line parameters
	_setEnv
	# validate the environment
	_checkExternalTools || { _error "cannot run without these external tools"; exit 1; }
	# check for the working directory
	_checkHome
  # if run without arguments, run and print _status
	[ -z "${_subCommand:-}" ] && _status
	# otherwise execute the subcommand function
	[ -n "${_subCommand:-}" ] && eval _"${_subCommand}"
}
main "${@}"
